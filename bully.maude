fmod SOUP{X :: TRIV} is
  sort Soup{X} .
  subsort X$Elt < Soup{X} .
  op empty : -> Soup{X} [ctor] .
  op __ : Soup{X} Soup{X} -> Soup{X} [ctor assoc comm id: empty] .
endfm

fmod PROC-STATE is
  sort ProcState .
  sorts Leader Normal Initiator FailedLeader .
  subsorts Leader Normal Initiator FailedLeader < ProcState .
  op leader : -> Leader [ctor] .
  op normal : -> Normal [ctor] .
  op initiator : -> Initiator [ctor] .
  op failedLeader : -> FailedLeader [ctor] .
endfm

fmod MESSAGE-TYPE is
  sort MessageType .
  sorts Election Ok Timeout .
  subsorts Election Ok Timeout < MessageType .
  op election : -> Election [ctor] .
  op ok : -> Ok [ctor] .
  op timeout : -> Timeout [ctor] .
endfm

fmod MESSAGE is
  pr NAT .
  pr MESSAGE-TYPE .
  sort Message .
  op message : Nat Nat Election -> Message [ctor] .
  op message : Nat Nat Ok -> Message [ctor] .
  op message : Nat Nat Timeout -> Message [ctor] .
endfm

view Message from TRIV to MESSAGE is
  sort Elt to Message .
endv

fmod PROC-IDS is
  pr SET{Nat} .
  vars N N0 N1 : Nat .
  vars S S0 : Set{Nat} .
  op makeBiggerThan : Nat Nat Set{Nat} -> Set{Nat} .
  op makeBiggerThanIds : Nat Set{Nat} Set{Nat} -> Set{Nat} .
  op biggerThanIds : Nat Set{Nat} -> Set{Nat} .
  op makeSmallerThan : Nat Nat Set{Nat} -> Set{Nat} .
  op makeSmallerThanIds : Nat Set{Nat} Set{Nat} -> Set{Nat} .
  op smallerThanIds : Nat Set{Nat} -> Set{Nat} .
  eq makeBiggerThan(N0, N1, S) = if N0 < N1 then insert(N1, S) else S fi .
  eq makeBiggerThanIds(N0, (N, S), S0) =
    if S == empty then makeBiggerThan(N0, N, S0) else makeBiggerThanIds(N0, S, makeBiggerThan(N0, N, S0)) fi .
  eq biggerThanIds(N, S) = makeBiggerThanIds(N, S, empty) .
  eq makeSmallerThan(N0, N1, S) = if N0 > N1 then insert(N1, S) else S fi .
  eq makeSmallerThanIds(N0, (N, S), S0) =
    if S == empty then makeSmallerThan(N0, N, S0) else makeSmallerThanIds(N0, S, makeSmallerThan(N0, N, S0)) fi .
  eq smallerThanIds(N, S) = makeSmallerThanIds(N, S, empty) .
endfm

fmod NETWORK is
  pr SET{Nat} .
  pr SOUP{Message} .
  vars FID TID : Nat .
  var IDS : Set{Nat} .
  op sndElectionMsgs : Nat Set{Nat} -> Soup{Message} .
  op sndOkMsg : Nat Nat -> Soup{Message} .
  op sndTimeoutMsg : Nat Nat -> Soup{Message} .
  eq sndElectionMsgs(FID, empty) = empty .
  eq sndElectionMsgs(FID, (TID, IDS)) = message(FID, TID, election) sndElectionMsgs(FID, IDS) .
  eq sndOkMsg(FID, TID) = message(FID, TID, ok) .
  eq sndTimeoutMsg(FID, TID) = message(FID, TID, timeout) .
endfm

fmod OCOM is
  pr NAT .
  pr PROC-STATE .
  pr NETWORK .
  sort OComp .
  op proc[_]:_ : Nat ProcState -> OComp [ctor] .
  op curLeader[_]:_ : Nat Nat -> OComp [ctor] .
  op sndElectionMsgCnt[_]:_ : Nat Nat -> OComp [ctor] .
  op rcvOkMsgCnt[_]:_ : Nat Nat -> OComp [ctor] .
  op rcvTimeoutMsgCnt[_]:_ : Nat Nat -> OComp [ctor] .
  op procIds:_ : Set{Nat} -> OComp [ctor] .
  op network:_ : Soup{Message} -> OComp [ctor] .
endfm

view OComp from TRIV to OCOM is
  sort Elt to OComp .
endv

fmod INIT-STATE is
  pr SOUP{OComp} .
  pr OCOM .
  sort State .
  op {_} : Soup{OComp} -> State [ctor] .
  op init : -> State .
  eq init = {
    (proc[0]: normal) (proc[1]: normal) (proc[2]: normal) (proc[3]: normal) (proc[4]: leader)
    (curLeader[0]: 4) (curLeader[1]: 4) (curLeader[2]: 4) (curLeader[3]: 4) (curLeader[4]: 4)
    (sndElectionMsgCnt[0]: 0) (sndElectionMsgCnt[1]: 0) (sndElectionMsgCnt[2]: 0) (sndElectionMsgCnt[3]: 0) (sndElectionMsgCnt[4]: 0)
    (rcvOkMsgCnt[0]: 0) (rcvOkMsgCnt[1]: 0) (rcvOkMsgCnt[2]: 0) (rcvOkMsgCnt[3]: 0) (rcvOkMsgCnt[4]: 0)
    (rcvTimeoutMsgCnt[0]: 0) (rcvTimeoutMsgCnt[1]: 0) (rcvTimeoutMsgCnt[2]: 0) (rcvTimeoutMsgCnt[3]: 0) (rcvTimeoutMsgCnt[4]: 0)
    (procIds: (0, 1, 2, 3, 4))
    (network: empty)
  } .
endfm

mod BULLY is
  pr PROC-IDS .
  pr INIT-STATE .

  vars S S0 S1 : Soup{OComp} .
  vars ID LID ID0 ID1 : Nat .
  vars SEC ROC RTC : Nat .
  var IDS : Set{Nat} .
  var NW : Soup{Message} .

  op syncCurLeader : Soup{OComp} Nat Set{Nat} -> Soup{OComp} .
  eq syncCurLeader(empty, ID, IDS) = empty .
  eq syncCurLeader(S, ID, empty) = S .
  eq syncCurLeader((curLeader[ID0]: ID1) S, ID, IDS) = 
    if ID0 in IDS then (curLeader[ID0]: ID) syncCurLeader(S, ID, IDS) 
    else (curLeader[ID0]: ID1) syncCurLeader(S, ID, IDS) fi .
  eq syncCurLeader((proc[ID0]: initiator) S, ID, IDS) =
    (proc[ID0]: normal) syncCurLeader(S, ID, IDS) .
  eq syncCurLeader(S0 S1, ID, IDS) = S0 syncCurLeader(S1, ID, IDS) [owise] .

  rl [become-failed-leader] :
    {(proc[ID]: leader) (network: empty) S} => {(proc[ID]: failedLeader) (network: empty) S} .

  rl [become-initiator] :
    {(proc[ID]: normal) (proc[LID]: failedLeader) (curLeader[ID]: LID) 
     (sndElectionMsgCnt[ID]: SEC) (rcvOkMsgCnt[ID]: ROC) (rcvTimeoutMsgCnt[ID]: RTC) S} =>
    {(proc[ID]: initiator) (proc[LID]: failedLeader) (curLeader[ID]: LID)
     (sndElectionMsgCnt[ID]: 0) (rcvOkMsgCnt[ID]: 0) (rcvTimeoutMsgCnt[ID]: 0) S} .

  crl [start-election] :
    {(proc[ID]: initiator) (sndElectionMsgCnt[ID]: SEC) (procIds: IDS) (network: NW) S} =>
    {(proc[ID]: initiator) (sndElectionMsgCnt[ID]: | biggerThanIds(ID, IDS) |) (procIds: IDS)
     (network: (sndElectionMsgs(ID, biggerThanIds(ID, IDS)) NW)) S}
    if SEC == 0 .

  crl [normal-execution-election] :
    {(proc[ID0]: normal) (proc[LID]: failedLeader) (curLeader[ID0]: LID)
     (sndElectionMsgCnt[ID0]: SEC) (rcvOkMsgCnt[ID0]: ROC) (rcvTimeoutMsgCnt[ID0]: RTC)
     (network: (message(ID1, ID0, election) NW)) S} =>
    {(proc[ID0]: initiator) (proc[LID]: failedLeader) (curLeader[ID0]: LID)
     (sndElectionMsgCnt[ID0]: 0) (rcvOkMsgCnt[ID0]: 0) (rcvTimeoutMsgCnt[ID0]: 0)
     (network: (sndOkMsg(ID0, ID1) NW)) S}
    if ID0 > ID1 .

  crl [normal-ignore-election] :
    {(proc[ID0]: normal) (curLeader[ID0]: LID) (proc[LID]: leader)
     (network: (message(ID1, ID0, election) NW)) S} =>
    {(proc[ID0]: normal) (curLeader[ID0]: LID) (proc[LID]: leader)
     (network: NW) S}
    if ID0 > ID1 .

  crl [elqection-timeout] :
    {(proc[ID0]: failedLeader) (network: (message(ID1, ID0, election) NW)) S} =>
    {(proc[ID0]: failedLeader) (network: (sndTimeoutMsg(ID0, ID1) NW)) S}
    if ID0 > ID1 .
  
  crl [initiator-execution-election] :
    {(proc[ID0]: initiator) (network: (message(ID1, ID0, election) NW)) S} =>
    {(proc[ID0]: initiator) (network: (sndOkMsg(ID0, ID1) NW)) S}
    if ID0 > ID1 .

  crl [initiator-execution-ok] :
    {(proc[ID0]: initiator) (rcvOkMsgCnt[ID0]: ROC) (network: (message(ID1, ID0, ok) NW)) S} =>
    {(proc[ID0]: initiator) (rcvOkMsgCnt[ID0]: ROC + 1) (network: NW) S}
    if ID0 < ID1 .

  crl [initiator-execution-timeout] :
    {(proc[ID0]: initiator) (rcvTimeoutMsgCnt[ID0]: RTC) (network: (message(ID1, ID0, timeout) NW)) S} =>
    {(proc[ID0]: initiator) (rcvTimeoutMsgCnt[ID0]: RTC + 1) (network: NW) S}
    if ID0 < ID1 .

  crl [initiator-become-normal] :
    {(proc[ID0]: initiator) (sndElectionMsgCnt[ID0]: SEC)
     (rcvOkMsgCnt[ID0]: ROC) (rcvTimeoutMsgCnt[ID0]: RTC) S} =>
    {(proc[ID0]: normal) (sndElectionMsgCnt[ID0]: SEC)
     (rcvOkMsgCnt[ID0]: ROC) (rcvTimeoutMsgCnt[ID0]: RTC) S}
    if SEC > 0 and SEC == (ROC + RTC) and ROC > 0 .

  crl [initiator-become-leader] :
    {(proc[ID0]: initiator) (curLeader[ID0]: ID1)
     (sndElectionMsgCnt[ID0]: SEC) (rcvTimeoutMsgCnt[ID0]: RTC) (rcvOkMsgCnt[ID0]: ROC)
     (procIds: IDS) S} =>
    {(proc[ID0]: leader) (curLeader[ID0]: ID0)
     (sndElectionMsgCnt[ID0]: SEC) (rcvTimeoutMsgCnt[ID0]: RTC) (rcvOkMsgCnt[ID0]: ROC)
     (procIds: IDS) syncCurLeader(S, ID0, smallerThanIds(ID0, IDS))}
    if SEC > 0 and SEC == RTC and ROC == 0 .
endm

search [1] in BULLY : init =>* {(proc[ID0]: leader) (proc[ID1]: leader) S} .
